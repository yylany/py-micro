# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import proto.user_srv_pb2 as user__srv__pb2


class UserStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Login = channel.unary_unary(
        '/user.srv.User/Login',
        request_serializer=user__srv__pb2.LoginRequest.SerializeToString,
        response_deserializer=user__srv__pb2.LoginResponse.FromString,
        )
    self.Register = channel.unary_unary(
        '/user.srv.User/Register',
        request_serializer=user__srv__pb2.RegisterRequest.SerializeToString,
        response_deserializer=user__srv__pb2.RegisterResponse.FromString,
        )


class UserServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Login(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Login': grpc.unary_unary_rpc_method_handler(
          servicer.Login,
          request_deserializer=user__srv__pb2.LoginRequest.FromString,
          response_serializer=user__srv__pb2.LoginResponse.SerializeToString,
      ),
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=user__srv__pb2.RegisterRequest.FromString,
          response_serializer=user__srv__pb2.RegisterResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'user.srv.User', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
